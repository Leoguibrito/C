Paralelize o programa dado, que realiza a soma de dois vetores. Esse programa recebe dois vetores em arquivos e mostra o resultado na saída:

./program 1 a b 
12 7 5 5 14 16 11 14 11 15

O primeiro argumento ("1" no exemplo acima) é o número de threads, e os dois últimos argumentos são os nomes dos arquivos que contém os vetores. O programador original implementou a leitura dos argumentos e a leitura dos vetores, mas desapareceu misteriosamente antes de efetivamente usar threads. Sua implementação deve criar o número de threads indicado na variável n_threads e deve distribuir as operações c[i] = a[i] + b[i] entre essas threads. Dicas:

Evite variáveis globais. Use o último argumento de pthread_create() para que cada worker thread receba um ponteiro cujo struct apontado contém as informações relevantes para aquela thread.
Os arquivos a e b do exemplo acima, assim como o resultado (arquivo c) estão no esqueleto fornecido.
Você não deve gerar mais threads do que elementos! Se o usuário solicitar 20 threads, e os vetores possuírem apenas 10 elementos, então apenas 10 threads deverão ser criadas
É possível gerar vetores aleatórios com um tamanho especifico usando uma sintaxe especial:

    ./program 1 gen:2000000 gen:2000000
    
Cuidado para não criar vetores grandes demais e travar a sua máquina!
Execute o programa com várias escolhas para o número de threads e meça o speedup. Reflita sobre os seguintes pontos:

    O speedup obtido está proximo do speedup ideal?
    O programa escala, ou seja, o speedup aumenta se aumentarmos o número de threads?
